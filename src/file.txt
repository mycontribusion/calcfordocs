import React, { useState } from 'react';
import { createRoot } from 'react-dom/client';

// Reusable Card component for consistent styling of each calculator section.
const Card = ({ title, children, onCalculate }) => (
  <div className="card">
    <h2 className="card-title">{title}</h2>
    <div className="card-content">
      {children}
    </div>
    <button
      onClick={onCalculate}
      className="button"
    >
      Calculate
    </button>
  </div>
);

// Component for the BMI Calculator.
const BMICalculator = ({ setResult }) => {
  const [weight, setWeight] = useState('');
  const [height, setHeight] = useState('');
  
  const calculate = () => {
    const weightVal = parseFloat(weight);
    const heightVal = parseFloat(height);
    
    if (isNaN(weightVal) || isNaN(heightVal) || weightVal <= 0 || heightVal <= 0) {
      setResult("Please enter valid weight and height values.");
      return;
    }
    
    const bmi = weightVal / (heightVal * heightVal);
    let category = "";
    
    if (bmi < 18.5) {
      category = "Underweight";
    } else if (bmi >= 18.5 && bmi < 24.9) {
      category = "Normal weight";
    } else if (bmi >= 25 && bmi < 29.9) {
      category = "Overweight";
    } else {
      category = "Obese";
    }
    
    setResult(`BMI: ${bmi.toFixed(2)} - ${category}`);
  };

  return (
    <Card title="BMI Calculator" onCalculate={calculate}>
      <input
        type="number"
        placeholder="Weight (kg)"
        value={weight}
        onChange={(e) => setWeight(e.target.value)}
        className="input-field"
      />
      <input
        type="number"
        placeholder="Height (m)"
        value={height}
        onChange={(e) => setHeight(e.target.value)}
        className="input-field"
      />
    </Card>
  );
};

// Component for the Weight Estimator.
const WeightEstimator = ({ setResult }) => {
  const [age, setAge] = useState('');
  const [unit, setUnit] = useState('years');
  
  const estimate = () => {
    const ageVal = parseFloat(age);
    let weight;

    if (isNaN(ageVal) || ageVal <= 0) {
      setResult("Please enter a valid age.");
      return;
    }

    if (unit === "days") {
      weight = (ageVal * 0.02) + 3;
    } else if (unit === "months") {
      weight = (ageVal * 0.5) + 4;
    } else if (unit === "years") {
      if (ageVal >= 1 && ageVal <= 5) {
        weight = (2 * ageVal) + 8;
      } else if (ageVal >= 6 && ageVal <= 12) {
        weight = (3 * ageVal) + 7;
      } else if (ageVal >= 13 && ageVal <= 18) {
        weight = (3.5 * ageVal) + 5;
      } else {
        setResult("Estimation not available for this age range.");
        return;
      }
    }
    
    setResult(`Estimated Weight: ${weight.toFixed(2)} kg`);
  };

  return (
    <Card title="Weight Estimator" onCalculate={estimate}>
      <div className="flex-container">
        <input
          type="number"
          placeholder="Age"
          value={age}
          onChange={(e) => setAge(e.target.value)}
          className="input-field flex-grow"
        />
        <select
          value={unit}
          onChange={(e) => setUnit(e.target.value)}
          className="select-field"
        >
          <option value="days">Days</option>
          <option value="months">Months</option>
          <option value="years">Years</option>
        </select>
      </div>
    </Card>
  );
};

// Component for the GCS Calculator.
const GCSCalculator = ({ setResult }) => {
  const [eye, setEye] = useState('1');
  const [verbal, setVerbal] = useState('1');
  const [motor, setMotor] = useState('1');
  
  const calculate = () => {
    const totalGCS = parseInt(eye) + parseInt(verbal) + parseInt(motor);
    let category = "";
    
    if (totalGCS >= 13) {
      category = "Mild Brain Injury";
    } else if (totalGCS >= 9) {
      category = "Moderate Brain Injury";
    } else {
      category = "Severe Brain Injury";
    }
    
    setResult(`Total GCS Score: ${totalGCS} - ${category}`);
  };

  return (
    <Card title="GCS Calculator" onCalculate={calculate}>
      <div className="input-group">
        <label className="label">Eye Response (1-4)</label>
        <input type="number" min="1" max="4" value={eye} onChange={(e) => setEye(e.target.value)} className="input-field" />
        <label className="label">Verbal Response (1-5)</label>
        <input type="number" min="1" max="5" value={verbal} onChange={(e) => setVerbal(e.target.value)} className="input-field" />
        <label className="label">Motor Response (1-6)</label>
        <input type="number" min="1" max="6" value={motor} onChange={(e) => setMotor(e.target.value)} className="input-field" />
      </div>
    </Card>
  );
};

// Component for the MAP Calculator.
const MAPCalculator = ({ setResult }) => {
  const [sbp, setSbp] = useState('');
  const [dbp, setDbp] = useState('');
  
  const calculate = () => {
    const sbpVal = parseFloat(sbp);
    const dbpVal = parseFloat(dbp);
    
    if (isNaN(sbpVal) || isNaN(dbpVal) || sbpVal <= 0 || dbpVal <= 0 || sbpVal < dbpVal) {
      setResult("Please enter valid SBP and DBP values.");
      return;
    }
    
    const map = dbpVal + (sbpVal - dbpVal) / 3;
    let category = "";
    
    if (map < 70) {
      category = "Low MAP - May indicate poor perfusion";
    } else if (map >= 70 && map <= 100) {
      category = "Normal MAP";
    } else {
      category = "High MAP - May indicate hypertension risk";
    }
    
    setResult(`Mean Arterial Pressure (MAP): ${map.toFixed(2)} mmHg - ${category}`);
  };

  return (
    <Card title="MAP Calculator" onCalculate={calculate}>
      <input
        type="number"
        placeholder="SBP (mmHg)"
        value={sbp}
        onChange={(e) => setSbp(e.target.value)}
        className="input-field"
      />
      <input
        type="number"
        placeholder="DBP (mmHg)"
        value={dbp}
        onChange={(e) => setDbp(e.target.value)}
        className="input-field"
      />
    </Card>
  );
};

// Component for the Glucose Converter.
const GlucoseConverter = ({ setResult }) => {
  const [value, setValue] = useState('');
  const [unit, setUnit] = useState('mg');
  const [type, setType] = useState('fasting');
  
  const convert = () => {
    const val = parseFloat(value);
    
    if (isNaN(val) || val <= 0) {
      setResult("Please enter a valid glucose level.");
      return;
    }
    
    let convertedValue = val;
    let convertedUnit = unit === "mmol" ? "mg/dL" : "mmol/L";
    
    if (unit === "mmol") {
      convertedValue = val * 18.0182;
    } else {
      convertedValue = val / 18.0182;
    }
    
    let category = "";
    const getCategory = (v, isFasting, isMgdL) => {
      if (isMgdL) {
        if (isFasting) {
          if (v < 70) return "(Low - Hypoglycemia)";
          if (v >= 70 && v < 100) return "(Normal)";
          if (v >= 100 && v < 126) return "(Impaired Fasting Glucose - Prediabetes)";
          return "(Diabetes)";
        } else {
          if (v < 140) return "(Normal)";
          if (v >= 140 && v < 200) return "(Impaired Glucose Tolerance - Prediabetes)";
          return "(Diabetes)";
        }
      } else {
        if (isFasting) {
          if (v < 3.9) return "(Low - Hypoglycemia)";
          if (v >= 3.9 && v < 5.6) return "(Normal)";
          if (v >= 5.6 && v < 7.0) return "(Impaired Fasting Glucose - Prediabetes)";
          return "(Diabetes)";
        } else {
          if (v < 7.8) return "(Normal)";
          if (v >= 7.8 && v < 11.1) return "(Impaired Glucose Tolerance - Prediabetes)";
          return "(Diabetes)";
        }
      }
    };
    
    category = getCategory(val, type === "fasting", unit === "mg");
    
    setResult(`Converted Value: ${convertedValue.toFixed(2)} ${convertedUnit} ${category}`);
  };

  return (
    <Card title="Glucose Converter" onCalculate={convert}>
      <input
        type="number"
        placeholder="Glucose Value"
        value={value}
        onChange={(e) => setValue(e.target.value)}
        className="input-field"
      />
      <select
        value={unit}
        onChange={(e) => setUnit(e.target.value)}
        className="select-field"
      >
        <option value="mg">mg/dL</option>
        <option value="mmol">mmol/L</option>
      </select>
      <select
        value={type}
        onChange={(e) => setType(e.target.value)}
        className="select-field"
      >
        <option value="fasting">Fasting</option>
        <option value="random">Random</option>
      </select>
    </Card>
  );
};

// Component for ECG Axis Interpreter.
const ECGAxisInterpreter = ({ setResult }) => {
  const [lead1, setLead1] = useState('positive');
  const [leadAvf, setLeadAvf] = useState('positive');
  
  const interpret = () => {
    let interpretation = "Normal Axis (0° to +90°).";
    let equiphasicLead = "";
    
    if (lead1 === "positive" && leadAvf === "positive") {
      interpretation = "Normal Axis (0° to +90°).";
      equiphasicLead = "Lead aVL";
    } else if (lead1 === "positive" && leadAvf === "negative") {
      interpretation = "Left Axis Deviation (-30° to -90°).";
      equiphasicLead = "Lead II";
    } else if (lead1 === "negative" && leadAvf === "positive") {
      interpretation = "Right Axis Deviation (+90° to +180°).";
      equiphasicLead = "Lead III";
    } else if (lead1 === "negative" && leadAvf === "negative") {
      interpretation = "Extreme Axis Deviation (-90° to $\\pm$180°).";
      equiphasicLead = "Lead aVR";
    }
    
    setResult(`Interpretation: ${interpretation} \nEquiphasic Lead: ${equiphasicLead}`);
  };
  
  return (
    <Card title="ECG Axis Interpreter" onCalculate={interpret}>
      <div className="input-group">
        <label className="label">Lead I</label>
        <select
          value={lead1}
          onChange={(e) => setLead1(e.target.value)}
          className="select-field"
        >
          <option value="positive">Positive</option>
          <option value="negative">Negative</option>
        </select>
        <label className="label">Lead aVF</label>
        <select
          value={leadAvf}
          onChange={(e) => setLeadAvf(e.target.value)}
          className="select-field"
        >
          <option value="positive">Positive</option>
          <option value="negative">Negative</option>
        </select>
      </div>
    </Card>
  );
};

// Component for ECG Wave Interpreter.
const ECGWaveInterpreter = ({ setResult }) => {
  const [wave, setWave] = useState('pWave');
  const [measurementType, setMeasurementType] = useState('none');
  const [valueType, setValueType] = useState('');
  const [numericalValue, setNumericalValue] = useState('');

  const interpret = () => {
    let numericalVal = parseFloat(numericalValue);
    
    if (isNaN(numericalVal)) {
      setResult("Please enter a valid numerical value.");
      return;
    }

    if (valueType === 'smallSquares') {
      if (measurementType === 'duration') numericalVal *= 0.04;
      if (measurementType === 'voltage') numericalVal *= 0.1;
    }
    if (valueType === 'largeSquares') {
      if (measurementType === 'duration') numericalVal *= 0.20;
      if (measurementType === 'voltage') numericalVal *= 0.5;
    }

    let interpretation = "ECG Interpretation:\n";

    if (measurementType === 'duration') {
      if (wave === 'pWave') {
        interpretation += (numericalVal >= 0.08 && numericalVal <= 0.12) ?
          `P Wave Duration: Normal (0.08 - 0.12 sec) - Your value: ${numericalVal.toFixed(2)}` : `P Wave Duration: Abnormal - Your value: ${numericalVal.toFixed(2)}`;
      } else if (wave === 'qrsWave') {
        interpretation += (numericalVal >= 0.06 && numericalVal <= 0.10) ?
          `QRS Duration: Normal (0.06 - 0.10 sec) - Your value: ${numericalVal.toFixed(2)}` : `QRS Duration: Abnormal - Your value: ${numericalVal.toFixed(2)}`;
      } else if (wave === 'qtInterval') {
        interpretation += (numericalVal >= 0.36 && numericalVal <= 0.44) ?
          `QT Interval: Normal (0.36 - 0.44 sec) - Your value: ${numericalVal.toFixed(2)}` : `QT Interval: Abnormal - Your value: ${numericalVal.toFixed(2)}`;
      }
    } else if (measurementType === 'voltage') {
      if (wave === 'pWave') {
        interpretation += (numericalVal >= 0.1 && numericalVal <= 0.3) ?
          `P Wave Amplitude: Normal (0.1 - 0.3 mV) - Your value: ${numericalVal.toFixed(2)}` : `P Wave Amplitude: Abnormal - Your value: ${numericalVal.toFixed(2)}`;
      } else if (wave === 'qrsWave') {
        interpretation += (numericalVal >= 0.5 && numericalVal <= 2.0) ?
          `QRS Amplitude: Normal (0.5 - 2.0 mV) - Your value: ${numericalVal.toFixed(2)}` : `QRS Amplitude: Abnormal - Your value: ${numericalVal.toFixed(2)}`;
      } else if (wave === 'tWave') {
        interpretation += (numericalVal >= 0.1 && numericalVal <= 0.3) ?
          `T Wave Amplitude: Normal (0.1 - 0.3 mV) - Your value: ${numericalVal.toFixed(2)}` : `T Wave Amplitude: Abnormal - Your value: ${numericalVal.toFixed(2)}`;
      }
    }
    setResult(interpretation);
  };
  
  return (
    <Card title="ECG Wave Interpreter" onCalculate={interpret}>
      <select
        value={wave}
        onChange={(e) => setWave(e.target.value)}
        className="select-field"
      >
        <option value="pWave">P Wave</option>
        <option value="qrsWave">QRS Wave</option>
        <option value="qtInterval">QT Interval</option>
        <option value="tWave">T Wave</option>
      </select>
      
      <select
        value={measurementType}
        onChange={(e) => {
          setMeasurementType(e.target.value);
          setValueType('');
        }}
        className="select-field"
      >
        <option value="none">Select Measurement Type</option>
        <option value="duration">Duration</option>
        <option value="voltage">Voltage</option>
      </select>
      
      {measurementType !== 'none' && (
        <select
          value={valueType}
          onChange={(e) => setValueType(e.target.value)}
          className="select-field"
        >
          <option value="">Select Unit</option>
          {measurementType === 'duration' && (
            <>
              <option value="seconds">Seconds</option>
              <option value="smallSquares">Small Squares</option>
              <option value="largeSquares">Large Squares</option>
            </>
          )}
          {measurementType === 'voltage' && (
            <>
              <option value="millivolts">Millivolts</option>
              <option value="smallSquares">Small Squares</option>
              <option value="largeSquares">Large Squares</option>
            </>
          )}
        </select>
      )}

      {valueType && (
        <input
          type="number"
          placeholder="Numerical Value"
          value={numericalValue}
          onChange={(e) => setNumericalValue(e.target.value)}
          className="input-field"
        />
      )}
    </Card>
  );
};

// Component for Heart Failure Criteria.
const HeartFailureCriteria = ({ setResult }) => {
  const [criteria, setCriteria] = useState({});
  
  const calculate = () => {
    const majorCriteriaList = ["pnd", "jvd", "rales", "cardiomegaly", "pulmonaryEdema", "s3", "venousPressure", "circulation", "weightLoss"];
    const minorCriteriaList = ["ankleEdema", "nocturnalCough", "dyspnea", "hepatomegaly", "pleuralEffusion", "tachycardia"];
    
    const majorCount = majorCriteriaList.filter(id => criteria[id]).length;
    const minorCount = minorCriteriaList.filter(id => criteria[id]).length;
    
    let diagnosis = "No heart failure";
    if (majorCount >= 2) {
      diagnosis = "Heart Failure Present";
    } else if (majorCount === 1 && minorCount >= 2) {
      diagnosis = "Possible Heart Failure";
    }
    
    setResult(`Diagnosis: ${diagnosis}`);
  };

  return (
    <Card title="Heart Failure Criteria" onCalculate={calculate}>
      <div className="criteria-container">
        <div className="criteria-list">
          <h3 className="criteria-title">Major Criteria</h3>
          {["pnd", "jvd", "rales", "cardiomegaly", "pulmonaryEdema", "s3", "venousPressure", "circulation", "weightLoss"].map(id => (
            <div key={id} className="criteria-item">
              <input
                type="checkbox"
                id={id}
                checked={criteria[id] || false}
                onChange={(e) => setCriteria({ ...criteria, [id]: e.target.checked })}
                className="checkbox"
              />
              <label htmlFor={id} className="checkbox-label">
                {id.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
              </label>
            </div>
          ))}
        </div>
        <div className="criteria-list">
          <h3 className="criteria-title">Minor Criteria</h3>
          {["ankleEdema", "nocturnalCough", "dyspnea", "hepatomegaly", "pleuralEffusion", "tachycardia"].map(id => (
            <div key={id} className="criteria-item">
              <input
                type="checkbox"
                id={id}
                checked={criteria[id] || false}
                onChange={(e) => setCriteria({ ...criteria, [id]: e.target.checked })}
                className="checkbox"
              />
              <label htmlFor={id} className="checkbox-label">
                {id.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
              </label>
            </div>
          ))}
        </div>
      </div>
    </Card>
  );
};

// Main App component that renders all sub-components.
const App = () => {
  const [result, setResult] = useState('');

  return (
    <div className="app-container">
      <style>
        {`
          @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');

          :root {
            --bg-color: #f3f4f6;
            --card-bg-color: #ffffff;
            --text-color-primary: #1f2937;
            --text-color-secondary: #6b7280;
            --accent-color: #4f46e5;
            --accent-color-hover: #4338ca;
            --border-color: #d1d5db;
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --rounded-xl: 12px;
            --rounded-full: 9999px;
          }

          body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
          }

          .app-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            background-color: var(--bg-color);
            padding: 2rem;
          }

          .header {
            width: 100%;
            max-width: 960px;
            text-align: center;
          }

          .title {
            font-size: 2.25rem;
            font-weight: 800;
            color: var(--text-color-primary);
            margin-bottom: 0.5rem;
          }

          .subtitle {
            font-size: 1.125rem;
            color: var(--text-color-secondary);
            margin-bottom: 2rem;
          }

          .result-box {
            background-color: var(--card-bg-color);
            border-radius: var(--rounded-xl);
            box-shadow: var(--shadow-lg);
            padding: 1.5rem;
            width: 100%;
            max-width: 960px;
            margin-bottom: 2rem;
            border-left: 4px solid var(--accent-color);
            text-align: left;
          }

          .result-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-color-primary);
            margin-bottom: 0.5rem;
          }
          
          .result-text {
            color: var(--text-color-secondary);
            white-space: pre-wrap;
          }

          .calculator-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 2rem;
            width: 100%;
            max-width: 960px;
          }

          @media (min-width: 768px) {
            .title {
              font-size: 3rem;
            }
            .subtitle {
              font-size: 1.25rem;
            }
            .calculator-grid {
              grid-template-columns: repeat(2, 1fr);
            }
            .full-width {
              grid-column: span 2;
            }
          }

          @media (min-width: 1024px) {
            .calculator-grid {
              grid-template-columns: repeat(3, 1fr);
            }
            .full-width {
              grid-column: span 3;
            }
          }

          .card {
            background-color: var(--card-bg-color);
            border-radius: var(--rounded-xl);
            box-shadow: var(--shadow-lg);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
          }
          
          .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--text-color-primary);
          }
          
          .card-content {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 1rem;
          }
          
          .input-field, .select-field {
            width: 100%;
            padding: 0.75rem;
            border-radius: 0.5rem;
            border: 2px solid var(--border-color);
            transition: all 0.2s ease-in-out;
          }
          
          .input-field:focus, .select-field:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px var(--accent-color-hover);
          }
          
          .button {
            margin-top: 1.5rem;
            width: 100%;
            padding: 0.75rem 1.5rem;
            background-color: var(--accent-color);
            color: white;
            font-weight: 700;
            border-radius: var(--rounded-full);
            box-shadow: var(--shadow-lg);
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
            border: none;
          }
          
          .button:hover {
            background-color: var(--accent-color-hover);
          }
          
          .button:active {
            transform: scale(0.95);
          }

          .flex-container {
            display: flex;
            align-items: center;
            gap: 0.5rem;
          }

          .flex-grow {
            flex-grow: 1;
          }

          .input-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
          }

          .label {
            color: #4b5563;
          }
          
          .criteria-container {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1rem;
          }

          @media (min-width: 640px) {
            .criteria-container {
              grid-template-columns: repeat(2, 1fr);
              gap: 1rem;
            }
          }
          
          .criteria-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
          }

          .criteria-title {
            font-weight: 500;
            color: #374151;
          }
          
          .criteria-item {
            display: flex;
            align-items: center;
          }
          
          .checkbox {
            appearance: none;
            width: 1.25rem;
            height: 1.25rem;
            border: 2px solid var(--border-color);
            border-radius: 0.25rem;
            background-color: var(--card-bg-color);
            transition: all 0.2s ease-in-out;
            cursor: pointer;
          }
          
          .checkbox:checked {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
          }
          
          .checkbox-label {
            margin-left: 0.5rem;
            color: #4b5563;
          }

        `}
      </style>
      <div className="header">
        <h1 className="title">
          Medical Calculators
        </h1>
        <p className="subtitle">
          A collection of common medical formulas for documentation.
        </p>
      </div>
      
      <div className="result-box">
        <h3 className="result-title">Result:</h3>
        <pre className="result-text">{result || 'Enter values and press a button to see the result.'}</pre>
      </div>

      <div className="calculator-grid">
        <BMICalculator setResult={setResult} />
        <WeightEstimator setResult={setResult} />
        <GCSCalculator setResult={setResult} />
        <MAPCalculator setResult={setResult} />
        <GlucoseConverter setResult={setResult} />
        <ECGAxisInterpreter setResult={setResult} />
        <ECGWaveInterpreter setResult={setResult} />
        <div className="full-width">
          <HeartFailureCriteria setResult={setResult} />
        </div>
      </div>
    </div>
  );
};

// Mount the app to the DOM.
const container = document.getElementById('root');
const root = createRoot(container);
root.render(<App />);
